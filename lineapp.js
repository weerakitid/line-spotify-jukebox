const spotify = require('./spotify')
const request = require('request-promise')
const LINE_HEADER = {
  "Content-Type": "application/json",
  Authorization: "Bearer " + process.env.LINE_ACCESS_TOKEN
}

const Commands = {
  ADD_TRACK: "ADD_TRACK",
  SEARCH_MORE: "SEARCH_MORE"
}

class lineApp {
  async recievedPostback(e) {
    const payload = JSON.parse(e.postback.data)
    switch (payload.commands) {
      case Commands.ADD_TRACK: {
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ô Flex message ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô Playlist
        return this.queueMusic(payload.track)
      }
      case Commands.SEARCH_MORE: {
        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å searchMusic ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ö‡∏™‡πà‡∏á param ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô payload
        return this.searchMusic(payload.terms, payload.skip, payload.limit)
      }
    }
  }

  async queueMusic(track) {
    await spotify.queueTrack(track)
    const message = {
      type: "flex",
      altTeaxt: "Thanks! Your track has been added.",
      contents:
      {
        type: "bubble",
        size: "kilo",
        body: {
          type: "box",
          layout: "vertical",
          contents: [
            {
              type: "text",
              contents: [
                {
                  type: "span",
                  text: "Thanks!",
                  color: "#1DB954",
                  weight: "bold",
                  size: "md"
                },
                {
                  type: "span",
                  text: "Your track has been added to the Jukebox playlist üéº",
                  color: "#191414"
                }
              ],
              wrap: true
            }
          ]
        },
        styles: {
          body: {
            backgroundColor: "#FFFFFF"
          }
        }
      }
    };
    return message;
  }

  async searchMusic(terms, skip = 0, limit = 10) {

    // ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏û‡∏•‡∏á ‡πÇ‡∏î‡∏¢‡∏Ñ‡πà‡∏≠‡∏¢ ‡πÜ ‡∏î‡∏∂‡∏á‡∏ó‡∏µ‡∏•‡∏∞ 10 ‡πÄ‡∏û‡∏•‡∏á
    const queryBgin = skip
    const queryEnd = limit
    const result = await spotify.searchTracks(terms, queryBegin, queryEnd)

    if (result.items.length > 0) {
      // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏¢‡∏π‡πà ‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á 'More' ‡πÉ‡∏ô Flex message ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏û‡∏•‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
      const remainingResults = result.total - limit - skip
      const showMoreButton = (remainingResults > 0)

      // ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏¥‡∏¢‡∏°
      result.items.sort((a, b) => (b.popularity - a.popularity))

      const message = {
        type: "flex",
        altText: "Your Spotify search result",
        constents: {
          type: "bubble",
          size: "giga",
          header: {
            type: "box",
            layout: "horizontal",
            contens: [
              {
                type: "image",
                url: "https://bcrm-i.line-scdn.net/bcrm/uploads/1557539795/public_asset/file/853/1591094107652078_Spotify_Icon_RGB_White.png",
                align: "start",
                size: "xxs",
                flex: 0,
                aspectRatio: "4:3"
              },
              {
                type: "text",
                text: "Powered by Spotify",
                color: "#ffffff",
                size: "xxs",
                align: "end",
                gravity: "center",
                positon: "relative",
                weight: "regular"
              }
            ],
            paddingAll: "10px"
          },
          body: {
            type: "box",
            layout: "vertical",
            contents: [],
            backgroundColot: "#191414",
            spacing: "md"
          },
          styles: {
            header: {
              backgroundColor: "#1DB954"
            }
          }
        }
      };

      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏° 'More' ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ‡πÇ‡∏î‡∏¢‡πÅ‡∏õ‡∏∞ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡πÉ‡∏ô payload ‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏µ‡∏Å
      if (showMoreButton) {
        message.contents.footer = this.generateMoreButton({
          command: Commands.SEARCH_MORE,
          trems: terms,
          skip: skip + limit,
          limit: limit
        })
      }

      // ‡∏ô‡∏≥‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    }
  }
}
